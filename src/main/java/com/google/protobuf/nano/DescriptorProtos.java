// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.google.protobuf.nano;

@SuppressWarnings("hiding")
public interface DescriptorProtos {

  public static final class FileDescriptorSet extends
      ExtendableMessageNano<FileDescriptorSet> {

    private static volatile FileDescriptorSet[] _emptyArray;
    public static FileDescriptorSet[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new FileDescriptorSet[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.FileDescriptorProto file = 1;
    public FileDescriptorProto[] file;

    public FileDescriptorSet() {
      clear();
    }

    public FileDescriptorSet clear() {
      file = FileDescriptorProto.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.file != null && this.file.length > 0) {
        for (int i = 0; i < this.file.length; i++) {
          FileDescriptorProto element = this.file[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.file != null && this.file.length > 0) {
        for (int i = 0; i < this.file.length; i++) {
          FileDescriptorProto element = this.file[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      return size;
    }

    @Override
    public FileDescriptorSet mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.file == null ? 0 : this.file.length;
            FileDescriptorProto[] newArray =
                new FileDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.file, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new FileDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new FileDescriptorProto();
            input.readMessage(newArray[i]);
            this.file = newArray;
            break;
          }
        }
      }
    }

    public static FileDescriptorSet parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new FileDescriptorSet(), data);
    }

    public static FileDescriptorSet parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new FileDescriptorSet().mergeFrom(input);
    }
  }

  public static final class FileDescriptorProto extends
      ExtendableMessageNano<FileDescriptorProto> {

    private static volatile FileDescriptorProto[] _emptyArray;
    public static FileDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new FileDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // optional string package = 2;
    public String package_;

    // repeated string dependency = 3;
    public String[] dependency;

    // repeated .google.protobuf.DescriptorProto message_type = 4;
    public DescriptorProto[] messageType;

    // repeated .google.protobuf.EnumDescriptorProto enum_type = 5;
    public EnumDescriptorProto[] enumType;

    // repeated .google.protobuf.ServiceDescriptorProto service = 6;
    public ServiceDescriptorProto[] service;

    // repeated .google.protobuf.FieldDescriptorProto extension = 7;
    public FieldDescriptorProto[] extension;

    // optional .google.protobuf.FileOptions options = 8;
    public FileOptions options;

    // optional .google.protobuf.SourceCodeInfo source_code_info = 9;
    public SourceCodeInfo sourceCodeInfo;

    public FileDescriptorProto() {
      clear();
    }

    public FileDescriptorProto clear() {
      name = "";
      package_ = "";
      dependency = WireFormatNano.EMPTY_STRING_ARRAY;
      messageType = DescriptorProto.emptyArray();
      enumType = EnumDescriptorProto.emptyArray();
      service = ServiceDescriptorProto.emptyArray();
      extension = FieldDescriptorProto.emptyArray();
      options = null;
      sourceCodeInfo = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (!this.package_.equals("")) {
        output.writeString(2, this.package_);
      }
      if (this.dependency != null && this.dependency.length > 0) {
        for (int i = 0; i < this.dependency.length; i++) {
          String element = this.dependency[i];
          if (element != null) {
            output.writeString(3, element);
          }
        }
      }
      if (this.messageType != null && this.messageType.length > 0) {
        for (int i = 0; i < this.messageType.length; i++) {
          DescriptorProto element = this.messageType[i];
          if (element != null) {
            output.writeMessage(4, element);
          }
        }
      }
      if (this.enumType != null && this.enumType.length > 0) {
        for (int i = 0; i < this.enumType.length; i++) {
          EnumDescriptorProto element = this.enumType[i];
          if (element != null) {
            output.writeMessage(5, element);
          }
        }
      }
      if (this.service != null && this.service.length > 0) {
        for (int i = 0; i < this.service.length; i++) {
          ServiceDescriptorProto element = this.service[i];
          if (element != null) {
            output.writeMessage(6, element);
          }
        }
      }
      if (this.extension != null && this.extension.length > 0) {
        for (int i = 0; i < this.extension.length; i++) {
          FieldDescriptorProto element = this.extension[i];
          if (element != null) {
            output.writeMessage(7, element);
          }
        }
      }
      if (this.options != null) {
        output.writeMessage(8, this.options);
      }
      if (this.sourceCodeInfo != null) {
        output.writeMessage(9, this.sourceCodeInfo);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (!this.package_.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(2, this.package_);
      }
      if (this.dependency != null && this.dependency.length > 0) {
        int dataCount = 0;
        int dataSize = 0;
        for (int i = 0; i < this.dependency.length; i++) {
          String element = this.dependency[i];
          if (element != null) {
            dataCount++;
            dataSize += CodedOutputByteBufferNano
                .computeStringSizeNoTag(element);
          }
        }
        size += dataSize;
        size += 1 * dataCount;
      }
      if (this.messageType != null && this.messageType.length > 0) {
        for (int i = 0; i < this.messageType.length; i++) {
          DescriptorProto element = this.messageType[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(4, element);
          }
        }
      }
      if (this.enumType != null && this.enumType.length > 0) {
        for (int i = 0; i < this.enumType.length; i++) {
          EnumDescriptorProto element = this.enumType[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(5, element);
          }
        }
      }
      if (this.service != null && this.service.length > 0) {
        for (int i = 0; i < this.service.length; i++) {
          ServiceDescriptorProto element = this.service[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(6, element);
          }
        }
      }
      if (this.extension != null && this.extension.length > 0) {
        for (int i = 0; i < this.extension.length; i++) {
          FieldDescriptorProto element = this.extension[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(7, element);
          }
        }
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(8, this.options);
      }
      if (this.sourceCodeInfo != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(9, this.sourceCodeInfo);
      }
      return size;
    }

    @Override
    public FileDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            this.package_ = input.readString();
            break;
          }
          case 26: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.dependency == null ? 0 : this.dependency.length;
            String[] newArray = new String[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.dependency, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readString();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readString();
            this.dependency = newArray;
            break;
          }
          case 34: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 34);
            int i = this.messageType == null ? 0 : this.messageType.length;
            DescriptorProto[] newArray =
                new DescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.messageType, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new DescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new DescriptorProto();
            input.readMessage(newArray[i]);
            this.messageType = newArray;
            break;
          }
          case 42: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 42);
            int i = this.enumType == null ? 0 : this.enumType.length;
            EnumDescriptorProto[] newArray =
                new EnumDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.enumType, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new EnumDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new EnumDescriptorProto();
            input.readMessage(newArray[i]);
            this.enumType = newArray;
            break;
          }
          case 50: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 50);
            int i = this.service == null ? 0 : this.service.length;
            ServiceDescriptorProto[] newArray =
                new ServiceDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.service, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new ServiceDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new ServiceDescriptorProto();
            input.readMessage(newArray[i]);
            this.service = newArray;
            break;
          }
          case 58: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 58);
            int i = this.extension == null ? 0 : this.extension.length;
            FieldDescriptorProto[] newArray =
                new FieldDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.extension, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new FieldDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new FieldDescriptorProto();
            input.readMessage(newArray[i]);
            this.extension = newArray;
            break;
          }
          case 66: {
            if (this.options == null) {
              this.options = new FileOptions();
            }
            input.readMessage(this.options);
            break;
          }
          case 74: {
            if (this.sourceCodeInfo == null) {
              this.sourceCodeInfo = new SourceCodeInfo();
            }
            input.readMessage(this.sourceCodeInfo);
            break;
          }
        }
      }
    }

    public static FileDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new FileDescriptorProto(), data);
    }

    public static FileDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new FileDescriptorProto().mergeFrom(input);
    }
  }

  public static final class DescriptorProto extends
      ExtendableMessageNano<DescriptorProto> {

    public static final class ExtensionRange extends
        ExtendableMessageNano<ExtensionRange> {

      private static volatile ExtensionRange[] _emptyArray;
      public static ExtensionRange[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ExtensionRange[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional int32 start = 1;
      public int start;

      // optional int32 end = 2;
      public int end;

      public ExtensionRange() {
        clear();
      }

      public ExtensionRange clear() {
        start = 0;
        end = 0;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.start != 0) {
          output.writeInt32(1, this.start);
        }
        if (this.end != 0) {
          output.writeInt32(2, this.end);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.start != 0) {
          size += CodedOutputByteBufferNano
              .computeInt32Size(1, this.start);
        }
        if (this.end != 0) {
          size += CodedOutputByteBufferNano
              .computeInt32Size(2, this.end);
        }
        return size;
      }

      @Override
      public ExtensionRange mergeFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              this.start = input.readInt32();
              break;
            }
            case 16: {
              this.end = input.readInt32();
              break;
            }
          }
        }
      }

      public static ExtensionRange parseFrom(byte[] data)
          throws InvalidProtocolBufferNanoException {
        return MessageNano.mergeFrom(new ExtensionRange(), data);
      }

      public static ExtensionRange parseFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ExtensionRange().mergeFrom(input);
      }
    }

    private static volatile DescriptorProto[] _emptyArray;
    public static DescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new DescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // repeated .google.protobuf.FieldDescriptorProto field = 2;
    public FieldDescriptorProto[] field;

    // repeated .google.protobuf.FieldDescriptorProto extension = 6;
    public FieldDescriptorProto[] extension;

    // repeated .google.protobuf.DescriptorProto nested_type = 3;
    public DescriptorProto[] nestedType;

    // repeated .google.protobuf.EnumDescriptorProto enum_type = 4;
    public EnumDescriptorProto[] enumType;

    // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
    public ExtensionRange[] extensionRange;

    // optional .google.protobuf.MessageOptions options = 7;
    public MessageOptions options;

    public DescriptorProto() {
      clear();
    }

    public DescriptorProto clear() {
      name = "";
      field = FieldDescriptorProto.emptyArray();
      extension = FieldDescriptorProto.emptyArray();
      nestedType = DescriptorProto.emptyArray();
      enumType = EnumDescriptorProto.emptyArray();
      extensionRange = ExtensionRange.emptyArray();
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (this.field != null && this.field.length > 0) {
        for (int i = 0; i < this.field.length; i++) {
          FieldDescriptorProto element = this.field[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.nestedType != null && this.nestedType.length > 0) {
        for (int i = 0; i < this.nestedType.length; i++) {
          DescriptorProto element = this.nestedType[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (this.enumType != null && this.enumType.length > 0) {
        for (int i = 0; i < this.enumType.length; i++) {
          EnumDescriptorProto element = this.enumType[i];
          if (element != null) {
            output.writeMessage(4, element);
          }
        }
      }
      if (this.extensionRange != null && this.extensionRange.length > 0) {
        for (int i = 0; i < this.extensionRange.length; i++) {
          ExtensionRange element = this.extensionRange[i];
          if (element != null) {
            output.writeMessage(5, element);
          }
        }
      }
      if (this.extension != null && this.extension.length > 0) {
        for (int i = 0; i < this.extension.length; i++) {
          FieldDescriptorProto element = this.extension[i];
          if (element != null) {
            output.writeMessage(6, element);
          }
        }
      }
      if (this.options != null) {
        output.writeMessage(7, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (this.field != null && this.field.length > 0) {
        for (int i = 0; i < this.field.length; i++) {
          FieldDescriptorProto element = this.field[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.nestedType != null && this.nestedType.length > 0) {
        for (int i = 0; i < this.nestedType.length; i++) {
          DescriptorProto element = this.nestedType[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (this.enumType != null && this.enumType.length > 0) {
        for (int i = 0; i < this.enumType.length; i++) {
          EnumDescriptorProto element = this.enumType[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(4, element);
          }
        }
      }
      if (this.extensionRange != null && this.extensionRange.length > 0) {
        for (int i = 0; i < this.extensionRange.length; i++) {
          ExtensionRange element = this.extensionRange[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(5, element);
          }
        }
      }
      if (this.extension != null && this.extension.length > 0) {
        for (int i = 0; i < this.extension.length; i++) {
          FieldDescriptorProto element = this.extension[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(6, element);
          }
        }
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(7, this.options);
      }
      return size;
    }

    @Override
    public DescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.field == null ? 0 : this.field.length;
            FieldDescriptorProto[] newArray =
                new FieldDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.field, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new FieldDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new FieldDescriptorProto();
            input.readMessage(newArray[i]);
            this.field = newArray;
            break;
          }
          case 26: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.nestedType == null ? 0 : this.nestedType.length;
            DescriptorProto[] newArray =
                new DescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.nestedType, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new DescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new DescriptorProto();
            input.readMessage(newArray[i]);
            this.nestedType = newArray;
            break;
          }
          case 34: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 34);
            int i = this.enumType == null ? 0 : this.enumType.length;
            EnumDescriptorProto[] newArray =
                new EnumDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.enumType, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new EnumDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new EnumDescriptorProto();
            input.readMessage(newArray[i]);
            this.enumType = newArray;
            break;
          }
          case 42: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 42);
            int i = this.extensionRange == null ? 0 : this.extensionRange.length;
            ExtensionRange[] newArray =
                new ExtensionRange[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.extensionRange, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new ExtensionRange();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new ExtensionRange();
            input.readMessage(newArray[i]);
            this.extensionRange = newArray;
            break;
          }
          case 50: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 50);
            int i = this.extension == null ? 0 : this.extension.length;
            FieldDescriptorProto[] newArray =
                new FieldDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.extension, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new FieldDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new FieldDescriptorProto();
            input.readMessage(newArray[i]);
            this.extension = newArray;
            break;
          }
          case 58: {
            if (this.options == null) {
              this.options = new MessageOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static DescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new DescriptorProto(), data);
    }

    public static DescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new DescriptorProto().mergeFrom(input);
    }
  }

  public static final class FieldDescriptorProto extends
      ExtendableMessageNano<FieldDescriptorProto> {

    // enum Type
    public static final int TYPE_DOUBLE = 1;
    public static final int TYPE_FLOAT = 2;
    public static final int TYPE_INT64 = 3;
    public static final int TYPE_UINT64 = 4;
    public static final int TYPE_INT32 = 5;
    public static final int TYPE_FIXED64 = 6;
    public static final int TYPE_FIXED32 = 7;
    public static final int TYPE_BOOL = 8;
    public static final int TYPE_STRING = 9;
    public static final int TYPE_GROUP = 10;
    public static final int TYPE_MESSAGE = 11;
    public static final int TYPE_BYTES = 12;
    public static final int TYPE_UINT32 = 13;
    public static final int TYPE_ENUM = 14;
    public static final int TYPE_SFIXED32 = 15;
    public static final int TYPE_SFIXED64 = 16;
    public static final int TYPE_SINT32 = 17;
    public static final int TYPE_SINT64 = 18;

    // enum Label
    public static final int LABEL_OPTIONAL = 1;
    public static final int LABEL_REQUIRED = 2;
    public static final int LABEL_REPEATED = 3;

    private static volatile FieldDescriptorProto[] _emptyArray;
    public static FieldDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new FieldDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // optional int32 number = 3;
    public int number;

    // optional .google.protobuf.FieldDescriptorProto.Label label = 4;
    public int label;

    // optional .google.protobuf.FieldDescriptorProto.Type type = 5;
    public int type;

    // optional string type_name = 6;
    public String typeName;

    // optional string extendee = 2;
    public String extendee;

    // optional string default_value = 7;
    public String defaultValue;

    // optional .google.protobuf.FieldOptions options = 8;
    public FieldOptions options;

    public FieldDescriptorProto() {
      clear();
    }

    public FieldDescriptorProto clear() {
      name = "";
      number = 0;
      label = FieldDescriptorProto.LABEL_OPTIONAL;
      type = FieldDescriptorProto.TYPE_DOUBLE;
      typeName = "";
      extendee = "";
      defaultValue = "";
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (!this.extendee.equals("")) {
        output.writeString(2, this.extendee);
      }
      if (this.number != 0) {
        output.writeInt32(3, this.number);
      }
      if (this.label != FieldDescriptorProto.LABEL_OPTIONAL) {
        output.writeInt32(4, this.label);
      }
      if (this.type != FieldDescriptorProto.TYPE_DOUBLE) {
        output.writeInt32(5, this.type);
      }
      if (!this.typeName.equals("")) {
        output.writeString(6, this.typeName);
      }
      if (!this.defaultValue.equals("")) {
        output.writeString(7, this.defaultValue);
      }
      if (this.options != null) {
        output.writeMessage(8, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (!this.extendee.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(2, this.extendee);
      }
      if (this.number != 0) {
        size += CodedOutputByteBufferNano
            .computeInt32Size(3, this.number);
      }
      if (this.label != FieldDescriptorProto.LABEL_OPTIONAL) {
        size += CodedOutputByteBufferNano
          .computeInt32Size(4, this.label);
      }
      if (this.type != FieldDescriptorProto.TYPE_DOUBLE) {
        size += CodedOutputByteBufferNano
          .computeInt32Size(5, this.type);
      }
      if (!this.typeName.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(6, this.typeName);
      }
      if (!this.defaultValue.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(7, this.defaultValue);
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(8, this.options);
      }
      return size;
    }

    @Override
    public FieldDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            this.extendee = input.readString();
            break;
          }
          case 24: {
            this.number = input.readInt32();
            break;
          }
          case 32: {
            int value = input.readInt32();
            switch (value) {
              case FieldDescriptorProto.LABEL_OPTIONAL:
              case FieldDescriptorProto.LABEL_REQUIRED:
              case FieldDescriptorProto.LABEL_REPEATED:
                this.label = value;
                break;
            }
            break;
          }
          case 40: {
            int value = input.readInt32();
            switch (value) {
              case FieldDescriptorProto.TYPE_DOUBLE:
              case FieldDescriptorProto.TYPE_FLOAT:
              case FieldDescriptorProto.TYPE_INT64:
              case FieldDescriptorProto.TYPE_UINT64:
              case FieldDescriptorProto.TYPE_INT32:
              case FieldDescriptorProto.TYPE_FIXED64:
              case FieldDescriptorProto.TYPE_FIXED32:
              case FieldDescriptorProto.TYPE_BOOL:
              case FieldDescriptorProto.TYPE_STRING:
              case FieldDescriptorProto.TYPE_GROUP:
              case FieldDescriptorProto.TYPE_MESSAGE:
              case FieldDescriptorProto.TYPE_BYTES:
              case FieldDescriptorProto.TYPE_UINT32:
              case FieldDescriptorProto.TYPE_ENUM:
              case FieldDescriptorProto.TYPE_SFIXED32:
              case FieldDescriptorProto.TYPE_SFIXED64:
              case FieldDescriptorProto.TYPE_SINT32:
              case FieldDescriptorProto.TYPE_SINT64:
                this.type = value;
                break;
            }
            break;
          }
          case 50: {
            this.typeName = input.readString();
            break;
          }
          case 58: {
            this.defaultValue = input.readString();
            break;
          }
          case 66: {
            if (this.options == null) {
              this.options = new FieldOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static FieldDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new FieldDescriptorProto(), data);
    }

    public static FieldDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new FieldDescriptorProto().mergeFrom(input);
    }
  }

  public static final class EnumDescriptorProto extends
      ExtendableMessageNano<EnumDescriptorProto> {

    private static volatile EnumDescriptorProto[] _emptyArray;
    public static EnumDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EnumDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // repeated .google.protobuf.EnumValueDescriptorProto value = 2;
    public EnumValueDescriptorProto[] value;

    // optional .google.protobuf.EnumOptions options = 3;
    public EnumOptions options;

    public EnumDescriptorProto() {
      clear();
    }

    public EnumDescriptorProto clear() {
      name = "";
      value = EnumValueDescriptorProto.emptyArray();
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (this.value != null && this.value.length > 0) {
        for (int i = 0; i < this.value.length; i++) {
          EnumValueDescriptorProto element = this.value[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.options != null) {
        output.writeMessage(3, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (this.value != null && this.value.length > 0) {
        for (int i = 0; i < this.value.length; i++) {
          EnumValueDescriptorProto element = this.value[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(3, this.options);
      }
      return size;
    }

    @Override
    public EnumDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.value == null ? 0 : this.value.length;
            EnumValueDescriptorProto[] newArray =
                new EnumValueDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.value, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new EnumValueDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new EnumValueDescriptorProto();
            input.readMessage(newArray[i]);
            this.value = newArray;
            break;
          }
          case 26: {
            if (this.options == null) {
              this.options = new EnumOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static EnumDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new EnumDescriptorProto(), data);
    }

    public static EnumDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EnumDescriptorProto().mergeFrom(input);
    }
  }

  public static final class EnumValueDescriptorProto extends
      ExtendableMessageNano<EnumValueDescriptorProto> {

    private static volatile EnumValueDescriptorProto[] _emptyArray;
    public static EnumValueDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EnumValueDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // optional int32 number = 2;
    public int number;

    // optional .google.protobuf.EnumValueOptions options = 3;
    public EnumValueOptions options;

    public EnumValueDescriptorProto() {
      clear();
    }

    public EnumValueDescriptorProto clear() {
      name = "";
      number = 0;
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (this.number != 0) {
        output.writeInt32(2, this.number);
      }
      if (this.options != null) {
        output.writeMessage(3, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (this.number != 0) {
        size += CodedOutputByteBufferNano
            .computeInt32Size(2, this.number);
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(3, this.options);
      }
      return size;
    }

    @Override
    public EnumValueDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 16: {
            this.number = input.readInt32();
            break;
          }
          case 26: {
            if (this.options == null) {
              this.options = new EnumValueOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static EnumValueDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new EnumValueDescriptorProto(), data);
    }

    public static EnumValueDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EnumValueDescriptorProto().mergeFrom(input);
    }
  }

  public static final class ServiceDescriptorProto extends
      ExtendableMessageNano<ServiceDescriptorProto> {

    private static volatile ServiceDescriptorProto[] _emptyArray;
    public static ServiceDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ServiceDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // repeated .google.protobuf.MethodDescriptorProto method = 2;
    public MethodDescriptorProto[] method;

    // optional .google.protobuf.ServiceOptions options = 3;
    public ServiceOptions options;

    public ServiceDescriptorProto() {
      clear();
    }

    public ServiceDescriptorProto clear() {
      name = "";
      method = MethodDescriptorProto.emptyArray();
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (this.method != null && this.method.length > 0) {
        for (int i = 0; i < this.method.length; i++) {
          MethodDescriptorProto element = this.method[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.options != null) {
        output.writeMessage(3, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (this.method != null && this.method.length > 0) {
        for (int i = 0; i < this.method.length; i++) {
          MethodDescriptorProto element = this.method[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(3, this.options);
      }
      return size;
    }

    @Override
    public ServiceDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.method == null ? 0 : this.method.length;
            MethodDescriptorProto[] newArray =
                new MethodDescriptorProto[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.method, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new MethodDescriptorProto();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new MethodDescriptorProto();
            input.readMessage(newArray[i]);
            this.method = newArray;
            break;
          }
          case 26: {
            if (this.options == null) {
              this.options = new ServiceOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static ServiceDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new ServiceDescriptorProto(), data);
    }

    public static ServiceDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ServiceDescriptorProto().mergeFrom(input);
    }
  }

  public static final class MethodDescriptorProto extends
      ExtendableMessageNano<MethodDescriptorProto> {

    private static volatile MethodDescriptorProto[] _emptyArray;
    public static MethodDescriptorProto[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new MethodDescriptorProto[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string name = 1;
    public String name;

    // optional string input_type = 2;
    public String inputType;

    // optional string output_type = 3;
    public String outputType;

    // optional .google.protobuf.MethodOptions options = 4;
    public MethodOptions options;

    public MethodDescriptorProto() {
      clear();
    }

    public MethodDescriptorProto clear() {
      name = "";
      inputType = "";
      outputType = "";
      options = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.name.equals("")) {
        output.writeString(1, this.name);
      }
      if (!this.inputType.equals("")) {
        output.writeString(2, this.inputType);
      }
      if (!this.outputType.equals("")) {
        output.writeString(3, this.outputType);
      }
      if (this.options != null) {
        output.writeMessage(4, this.options);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.name.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
      }
      if (!this.inputType.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(2, this.inputType);
      }
      if (!this.outputType.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(3, this.outputType);
      }
      if (this.options != null) {
        size += CodedOutputByteBufferNano
          .computeMessageSize(4, this.options);
      }
      return size;
    }

    @Override
    public MethodDescriptorProto mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.name = input.readString();
            break;
          }
          case 18: {
            this.inputType = input.readString();
            break;
          }
          case 26: {
            this.outputType = input.readString();
            break;
          }
          case 34: {
            if (this.options == null) {
              this.options = new MethodOptions();
            }
            input.readMessage(this.options);
            break;
          }
        }
      }
    }

    public static MethodDescriptorProto parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new MethodDescriptorProto(), data);
    }

    public static MethodDescriptorProto parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new MethodDescriptorProto().mergeFrom(input);
    }
  }

  public static final class FileOptions extends
      ExtendableMessageNano<FileOptions> {

    // enum OptimizeMode
    public static final int SPEED = 1;
    public static final int CODE_SIZE = 2;
    public static final int LITE_RUNTIME = 3;

    private static volatile FileOptions[] _emptyArray;
    public static FileOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new FileOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string java_package = 1;
    public String javaPackage;

    // optional string java_outer_classname = 8;
    public String javaOuterClassname;

    // optional bool java_multiple_files = 10 [default = false];
    public boolean javaMultipleFiles;

    // optional bool java_generate_equals_and_hash = 20 [default = false];
    public boolean javaGenerateEqualsAndHash;

    // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];
    public int optimizeFor;

    // optional bool cc_generic_services = 16 [default = false];
    public boolean ccGenericServices;

    // optional bool java_generic_services = 17 [default = false];
    public boolean javaGenericServices;

    // optional bool py_generic_services = 18 [default = false];
    public boolean pyGenericServices;

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public FileOptions() {
      clear();
    }

    public FileOptions clear() {
      javaPackage = "";
      javaOuterClassname = "";
      javaMultipleFiles = false;
      javaGenerateEqualsAndHash = false;
      optimizeFor = FileOptions.SPEED;
      ccGenericServices = false;
      javaGenericServices = false;
      pyGenericServices = false;
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.javaPackage.equals("")) {
        output.writeString(1, this.javaPackage);
      }
      if (!this.javaOuterClassname.equals("")) {
        output.writeString(8, this.javaOuterClassname);
      }
      if (this.optimizeFor != FileOptions.SPEED) {
        output.writeInt32(9, this.optimizeFor);
      }
      if (this.javaMultipleFiles != false) {
        output.writeBool(10, this.javaMultipleFiles);
      }
      if (this.ccGenericServices != false) {
        output.writeBool(16, this.ccGenericServices);
      }
      if (this.javaGenericServices != false) {
        output.writeBool(17, this.javaGenericServices);
      }
      if (this.pyGenericServices != false) {
        output.writeBool(18, this.pyGenericServices);
      }
      if (this.javaGenerateEqualsAndHash != false) {
        output.writeBool(20, this.javaGenerateEqualsAndHash);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.javaPackage.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.javaPackage);
      }
      if (!this.javaOuterClassname.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(8, this.javaOuterClassname);
      }
      if (this.optimizeFor != FileOptions.SPEED) {
        size += CodedOutputByteBufferNano
          .computeInt32Size(9, this.optimizeFor);
      }
      if (this.javaMultipleFiles != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(10, this.javaMultipleFiles);
      }
      if (this.ccGenericServices != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(16, this.ccGenericServices);
      }
      if (this.javaGenericServices != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(17, this.javaGenericServices);
      }
      if (this.pyGenericServices != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(18, this.pyGenericServices);
      }
      if (this.javaGenerateEqualsAndHash != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(20, this.javaGenerateEqualsAndHash);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public FileOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.javaPackage = input.readString();
            break;
          }
          case 66: {
            this.javaOuterClassname = input.readString();
            break;
          }
          case 72: {
            int value = input.readInt32();
            switch (value) {
              case FileOptions.SPEED:
              case FileOptions.CODE_SIZE:
              case FileOptions.LITE_RUNTIME:
                this.optimizeFor = value;
                break;
            }
            break;
          }
          case 80: {
            this.javaMultipleFiles = input.readBool();
            break;
          }
          case 128: {
            this.ccGenericServices = input.readBool();
            break;
          }
          case 136: {
            this.javaGenericServices = input.readBool();
            break;
          }
          case 144: {
            this.pyGenericServices = input.readBool();
            break;
          }
          case 160: {
            this.javaGenerateEqualsAndHash = input.readBool();
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static FileOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new FileOptions(), data);
    }

    public static FileOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new FileOptions().mergeFrom(input);
    }
  }

  public static final class MessageOptions extends
      ExtendableMessageNano<MessageOptions> {

    private static volatile MessageOptions[] _emptyArray;
    public static MessageOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new MessageOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional bool message_set_wire_format = 1 [default = false];
    public boolean messageSetWireFormat;

    // optional bool no_standard_descriptor_accessor = 2 [default = false];
    public boolean noStandardDescriptorAccessor;

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public MessageOptions() {
      clear();
    }

    public MessageOptions clear() {
      messageSetWireFormat = false;
      noStandardDescriptorAccessor = false;
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.messageSetWireFormat != false) {
        output.writeBool(1, this.messageSetWireFormat);
      }
      if (this.noStandardDescriptorAccessor != false) {
        output.writeBool(2, this.noStandardDescriptorAccessor);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.messageSetWireFormat != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(1, this.messageSetWireFormat);
      }
      if (this.noStandardDescriptorAccessor != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(2, this.noStandardDescriptorAccessor);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public MessageOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.messageSetWireFormat = input.readBool();
            break;
          }
          case 16: {
            this.noStandardDescriptorAccessor = input.readBool();
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static MessageOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new MessageOptions(), data);
    }

    public static MessageOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new MessageOptions().mergeFrom(input);
    }
  }

  public static final class FieldOptions extends
      ExtendableMessageNano<FieldOptions> {

    // enum CType
    public static final int STRING = 0;
    public static final int CORD = 1;
    public static final int STRING_PIECE = 2;

    private static volatile FieldOptions[] _emptyArray;
    public static FieldOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new FieldOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];
    public int ctype;

    // optional bool packed = 2;
    public boolean packed;

    // optional bool deprecated = 3 [default = false];
    public boolean deprecated;

    // optional string experimental_map_key = 9;
    public String experimentalMapKey;

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public FieldOptions() {
      clear();
    }

    public FieldOptions clear() {
      ctype = FieldOptions.STRING;
      packed = false;
      deprecated = false;
      experimentalMapKey = "";
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.ctype != FieldOptions.STRING) {
        output.writeInt32(1, this.ctype);
      }
      if (this.packed != false) {
        output.writeBool(2, this.packed);
      }
      if (this.deprecated != false) {
        output.writeBool(3, this.deprecated);
      }
      if (!this.experimentalMapKey.equals("")) {
        output.writeString(9, this.experimentalMapKey);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.ctype != FieldOptions.STRING) {
        size += CodedOutputByteBufferNano
          .computeInt32Size(1, this.ctype);
      }
      if (this.packed != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(2, this.packed);
      }
      if (this.deprecated != false) {
        size += CodedOutputByteBufferNano
            .computeBoolSize(3, this.deprecated);
      }
      if (!this.experimentalMapKey.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(9, this.experimentalMapKey);
      }
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public FieldOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int value = input.readInt32();
            switch (value) {
              case FieldOptions.STRING:
              case FieldOptions.CORD:
              case FieldOptions.STRING_PIECE:
                this.ctype = value;
                break;
            }
            break;
          }
          case 16: {
            this.packed = input.readBool();
            break;
          }
          case 24: {
            this.deprecated = input.readBool();
            break;
          }
          case 74: {
            this.experimentalMapKey = input.readString();
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static FieldOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new FieldOptions(), data);
    }

    public static FieldOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new FieldOptions().mergeFrom(input);
    }
  }

  public static final class EnumOptions extends
      ExtendableMessageNano<EnumOptions> {

    private static volatile EnumOptions[] _emptyArray;
    public static EnumOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EnumOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public EnumOptions() {
      clear();
    }

    public EnumOptions clear() {
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public EnumOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static EnumOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new EnumOptions(), data);
    }

    public static EnumOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EnumOptions().mergeFrom(input);
    }
  }

  public static final class EnumValueOptions extends
      ExtendableMessageNano<EnumValueOptions> {

    private static volatile EnumValueOptions[] _emptyArray;
    public static EnumValueOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EnumValueOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public EnumValueOptions() {
      clear();
    }

    public EnumValueOptions clear() {
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public EnumValueOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static EnumValueOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new EnumValueOptions(), data);
    }

    public static EnumValueOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EnumValueOptions().mergeFrom(input);
    }
  }

  public static final class ServiceOptions extends
      ExtendableMessageNano<ServiceOptions> {

    private static volatile ServiceOptions[] _emptyArray;
    public static ServiceOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ServiceOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public ServiceOptions() {
      clear();
    }

    public ServiceOptions clear() {
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public ServiceOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static ServiceOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new ServiceOptions(), data);
    }

    public static ServiceOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ServiceOptions().mergeFrom(input);
    }
  }

  public static final class MethodOptions extends
      ExtendableMessageNano<MethodOptions> {

    private static volatile MethodOptions[] _emptyArray;
    public static MethodOptions[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new MethodOptions[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
    public UninterpretedOption[] uninterpretedOption;

    public MethodOptions() {
      clear();
    }

    public MethodOptions clear() {
      uninterpretedOption = UninterpretedOption.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            output.writeMessage(999, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uninterpretedOption != null && this.uninterpretedOption.length > 0) {
        for (int i = 0; i < this.uninterpretedOption.length; i++) {
          UninterpretedOption element = this.uninterpretedOption[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(999, element);
          }
        }
      }
      return size;
    }

    @Override
    public MethodOptions mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 7994: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 7994);
            int i = this.uninterpretedOption == null ? 0 : this.uninterpretedOption.length;
            UninterpretedOption[] newArray =
                new UninterpretedOption[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.uninterpretedOption, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new UninterpretedOption();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new UninterpretedOption();
            input.readMessage(newArray[i]);
            this.uninterpretedOption = newArray;
            break;
          }
        }
      }
    }

    public static MethodOptions parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new MethodOptions(), data);
    }

    public static MethodOptions parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new MethodOptions().mergeFrom(input);
    }
  }

  public static final class UninterpretedOption extends
      ExtendableMessageNano<UninterpretedOption> {

    public static final class NamePart extends
        ExtendableMessageNano<NamePart> {

      private static volatile NamePart[] _emptyArray;
      public static NamePart[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new NamePart[0];
            }
          }
        }
        return _emptyArray;
      }

      // required string name_part = 1;
      public String namePart;

      // required bool is_extension = 2;
      public boolean isExtension;

      public NamePart() {
        clear();
      }

      public NamePart clear() {
        namePart = "";
        isExtension = false;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(CodedOutputByteBufferNano output)
          throws java.io.IOException {
        output.writeString(1, this.namePart);
        output.writeBool(2, this.isExtension);
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        size += CodedOutputByteBufferNano
            .computeStringSize(1, this.namePart);
        size += CodedOutputByteBufferNano
            .computeBoolSize(2, this.isExtension);
        return size;
      }

      @Override
      public NamePart mergeFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              this.namePart = input.readString();
              break;
            }
            case 16: {
              this.isExtension = input.readBool();
              break;
            }
          }
        }
      }

      public static NamePart parseFrom(byte[] data)
          throws InvalidProtocolBufferNanoException {
        return MessageNano.mergeFrom(new NamePart(), data);
      }

      public static NamePart parseFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new NamePart().mergeFrom(input);
      }
    }

    private static volatile UninterpretedOption[] _emptyArray;
    public static UninterpretedOption[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new UninterpretedOption[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.UninterpretedOption.NamePart name = 2;
    public NamePart[] name;

    // optional string identifier_value = 3;
    public String identifierValue;

    // optional uint64 positive_int_value = 4;
    public long positiveIntValue;

    // optional int64 negative_int_value = 5;
    public long negativeIntValue;

    // optional double double_value = 6;
    public double doubleValue;

    // optional bytes string_value = 7;
    public byte[] stringValue;

    // optional string aggregate_value = 8;
    public String aggregateValue;

    public UninterpretedOption() {
      clear();
    }

    public UninterpretedOption clear() {
      name = NamePart.emptyArray();
      identifierValue = "";
      positiveIntValue = 0L;
      negativeIntValue = 0L;
      doubleValue = 0D;
      stringValue = WireFormatNano.EMPTY_BYTES;
      aggregateValue = "";
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.name != null && this.name.length > 0) {
        for (int i = 0; i < this.name.length; i++) {
          NamePart element = this.name[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (!this.identifierValue.equals("")) {
        output.writeString(3, this.identifierValue);
      }
      if (this.positiveIntValue != 0L) {
        output.writeUInt64(4, this.positiveIntValue);
      }
      if (this.negativeIntValue != 0L) {
        output.writeInt64(5, this.negativeIntValue);
      }
      if (Double.doubleToLongBits(this.doubleValue)
          != Double.doubleToLongBits(0D)) {
        output.writeDouble(6, this.doubleValue);
      }
      if (!java.util.Arrays.equals(this.stringValue, WireFormatNano.EMPTY_BYTES)) {
        output.writeBytes(7, this.stringValue);
      }
      if (!this.aggregateValue.equals("")) {
        output.writeString(8, this.aggregateValue);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.name != null && this.name.length > 0) {
        for (int i = 0; i < this.name.length; i++) {
          NamePart element = this.name[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (!this.identifierValue.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(3, this.identifierValue);
      }
      if (this.positiveIntValue != 0L) {
        size += CodedOutputByteBufferNano
            .computeUInt64Size(4, this.positiveIntValue);
      }
      if (this.negativeIntValue != 0L) {
        size += CodedOutputByteBufferNano
            .computeInt64Size(5, this.negativeIntValue);
      }
      if (Double.doubleToLongBits(this.doubleValue)
          != Double.doubleToLongBits(0D)) {
        size += CodedOutputByteBufferNano
            .computeDoubleSize(6, this.doubleValue);
      }
      if (!java.util.Arrays.equals(this.stringValue, WireFormatNano.EMPTY_BYTES)) {
        size += CodedOutputByteBufferNano
            .computeBytesSize(7, this.stringValue);
      }
      if (!this.aggregateValue.equals("")) {
        size += CodedOutputByteBufferNano
            .computeStringSize(8, this.aggregateValue);
      }
      return size;
    }

    @Override
    public UninterpretedOption mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 18: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.name == null ? 0 : this.name.length;
            NamePart[] newArray =
                new NamePart[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.name, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new NamePart();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new NamePart();
            input.readMessage(newArray[i]);
            this.name = newArray;
            break;
          }
          case 26: {
            this.identifierValue = input.readString();
            break;
          }
          case 32: {
            this.positiveIntValue = input.readUInt64();
            break;
          }
          case 40: {
            this.negativeIntValue = input.readInt64();
            break;
          }
          case 49: {
            this.doubleValue = input.readDouble();
            break;
          }
          case 58: {
            this.stringValue = input.readBytes();
            break;
          }
          case 66: {
            this.aggregateValue = input.readString();
            break;
          }
        }
      }
    }

    public static UninterpretedOption parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new UninterpretedOption(), data);
    }

    public static UninterpretedOption parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new UninterpretedOption().mergeFrom(input);
    }
  }

  public static final class SourceCodeInfo extends
      ExtendableMessageNano<SourceCodeInfo> {

    public static final class Location extends
        ExtendableMessageNano<Location> {

      private static volatile Location[] _emptyArray;
      public static Location[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Location[0];
            }
          }
        }
        return _emptyArray;
      }

      // repeated int32 path = 1 [packed = true];
      public int[] path;

      // repeated int32 span = 2 [packed = true];
      public int[] span;

      public Location() {
        clear();
      }

      public Location clear() {
        path = WireFormatNano.EMPTY_INT_ARRAY;
        span = WireFormatNano.EMPTY_INT_ARRAY;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.path != null && this.path.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.path.length; i++) {
            int element = this.path[i];
            dataSize += CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          output.writeRawVarint32(10);
          output.writeRawVarint32(dataSize);
          for (int i = 0; i < this.path.length; i++) {
            output.writeInt32NoTag(this.path[i]);
          }
        }
        if (this.span != null && this.span.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.span.length; i++) {
            int element = this.span[i];
            dataSize += CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          output.writeRawVarint32(18);
          output.writeRawVarint32(dataSize);
          for (int i = 0; i < this.span.length; i++) {
            output.writeInt32NoTag(this.span[i]);
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.path != null && this.path.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.path.length; i++) {
            int element = this.path[i];
            dataSize += CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1;
          size += CodedOutputByteBufferNano
              .computeRawVarint32Size(dataSize);
        }
        if (this.span != null && this.span.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.span.length; i++) {
            int element = this.span[i];
            dataSize += CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1;
          size += CodedOutputByteBufferNano
              .computeRawVarint32Size(dataSize);
        }
        return size;
      }

      @Override
      public Location mergeFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int arrayLength = WireFormatNano
                  .getRepeatedFieldArrayLength(input, 8);
              int i = this.path == null ? 0 : this.path.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                System.arraycopy(this.path, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readInt32();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readInt32();
              this.path = newArray;
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                input.readInt32();
                arrayLength++;
              }
              input.rewindToPosition(startPos);
              int i = this.path == null ? 0 : this.path.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                System.arraycopy(this.path, 0, newArray, 0, i);
              }
              for (; i < newArray.length; i++) {
                newArray[i] = input.readInt32();
              }
              this.path = newArray;
              input.popLimit(limit);
              break;
            }
            case 16: {
              int arrayLength = WireFormatNano
                  .getRepeatedFieldArrayLength(input, 16);
              int i = this.span == null ? 0 : this.span.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                System.arraycopy(this.span, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readInt32();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readInt32();
              this.span = newArray;
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                input.readInt32();
                arrayLength++;
              }
              input.rewindToPosition(startPos);
              int i = this.span == null ? 0 : this.span.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                System.arraycopy(this.span, 0, newArray, 0, i);
              }
              for (; i < newArray.length; i++) {
                newArray[i] = input.readInt32();
              }
              this.span = newArray;
              input.popLimit(limit);
              break;
            }
          }
        }
      }

      public static Location parseFrom(byte[] data)
          throws InvalidProtocolBufferNanoException {
        return MessageNano.mergeFrom(new Location(), data);
      }

      public static Location parseFrom(
              CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Location().mergeFrom(input);
      }
    }

    private static volatile SourceCodeInfo[] _emptyArray;
    public static SourceCodeInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new SourceCodeInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .google.protobuf.SourceCodeInfo.Location location = 1;
    public Location[] location;

    public SourceCodeInfo() {
      clear();
    }

    public SourceCodeInfo clear() {
      location = Location.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.location != null && this.location.length > 0) {
        for (int i = 0; i < this.location.length; i++) {
          Location element = this.location[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.location != null && this.location.length > 0) {
        for (int i = 0; i < this.location.length; i++) {
          Location element = this.location[i];
          if (element != null) {
            size += CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      return size;
    }

    @Override
    public SourceCodeInfo mergeFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.location == null ? 0 : this.location.length;
            Location[] newArray =
                new Location[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.location, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new Location();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new Location();
            input.readMessage(newArray[i]);
            this.location = newArray;
            break;
          }
        }
      }
    }

    public static SourceCodeInfo parseFrom(byte[] data)
        throws InvalidProtocolBufferNanoException {
      return MessageNano.mergeFrom(new SourceCodeInfo(), data);
    }

    public static SourceCodeInfo parseFrom(
            CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new SourceCodeInfo().mergeFrom(input);
    }
  }
}
