package uk.co.thomasc.steamkit.base.generated;// Generated by the protocol buffer compiler.  DO NOT EDIT!

@SuppressWarnings("hiding")
public interface ContentManifest {

  public static final class ContentManifestPayload extends
      com.google.protobuf.nano.ExtendableMessageNano<ContentManifestPayload> {

    public static final class FileMapping extends
        com.google.protobuf.nano.ExtendableMessageNano<FileMapping> {

      public static final class ChunkData extends
          com.google.protobuf.nano.ExtendableMessageNano<ChunkData> {

        private static volatile ChunkData[] _emptyArray;
        public static ChunkData[] emptyArray() {
          // Lazily initializes the empty array
          if (_emptyArray == null) {
            synchronized (
                com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
              if (_emptyArray == null) {
                _emptyArray = new ChunkData[0];
              }
            }
          }
          return _emptyArray;
        }

        // optional bytes sha = 1;
        public byte[] sha;

        // optional fixed32 crc = 2;
        public int crc;

        // optional uint64 offset = 3;
        public long offset;

        // optional uint32 cb_original = 4;
        public int cbOriginal;

        // optional uint32 cb_compressed = 5;
        public int cbCompressed;

        public ChunkData() {
          clear();
        }

        public ChunkData clear() {
          sha = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
          crc = 0;
          offset = 0L;
          cbOriginal = 0;
          cbCompressed = 0;
          unknownFieldData = null;
          cachedSize = -1;
          return this;
        }

        @Override
        public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
            throws java.io.IOException {
          if (!java.util.Arrays.equals(this.sha, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
            output.writeBytes(1, this.sha);
          }
          if (this.crc != 0) {
            output.writeFixed32(2, this.crc);
          }
          if (this.offset != 0L) {
            output.writeUInt64(3, this.offset);
          }
          if (this.cbOriginal != 0) {
            output.writeUInt32(4, this.cbOriginal);
          }
          if (this.cbCompressed != 0) {
            output.writeUInt32(5, this.cbCompressed);
          }
          super.writeTo(output);
        }

        @Override
        protected int computeSerializedSize() {
          int size = super.computeSerializedSize();
          if (!java.util.Arrays.equals(this.sha, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeBytesSize(1, this.sha);
          }
          if (this.crc != 0) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeFixed32Size(2, this.crc);
          }
          if (this.offset != 0L) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt64Size(3, this.offset);
          }
          if (this.cbOriginal != 0) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32Size(4, this.cbOriginal);
          }
          if (this.cbCompressed != 0) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32Size(5, this.cbCompressed);
          }
          return size;
        }

        @Override
        public ChunkData mergeFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!storeUnknownField(input, tag)) {
                  return this;
                }
                break;
              }
              case 10: {
                this.sha = input.readBytes();
                break;
              }
              case 21: {
                this.crc = input.readFixed32();
                break;
              }
              case 24: {
                this.offset = input.readUInt64();
                break;
              }
              case 32: {
                this.cbOriginal = input.readUInt32();
                break;
              }
              case 40: {
                this.cbCompressed = input.readUInt32();
                break;
              }
            }
          }
        }

        public static ChunkData parseFrom(byte[] data)
            throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
          return com.google.protobuf.nano.MessageNano.mergeFrom(new ChunkData(), data);
        }

        public static ChunkData parseFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          return new ChunkData().mergeFrom(input);
        }
      }

      private static volatile FileMapping[] _emptyArray;
      public static FileMapping[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new FileMapping[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional string filename = 1;
      public String filename;

      // optional uint64 size = 2;
      public long size;

      // optional uint32 flags = 3;
      public int flags;

      // optional bytes sha_filename = 4;
      public byte[] shaFilename;

      // optional bytes sha_content = 5;
      public byte[] shaContent;

      // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      public ChunkData[] chunks;

      public FileMapping() {
        clear();
      }

      public FileMapping clear() {
        filename = "";
        size = 0L;
        flags = 0;
        shaFilename = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
        shaContent = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
        chunks = ChunkData.emptyArray();
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (!this.filename.equals("")) {
          output.writeString(1, this.filename);
        }
        if (this.size != 0L) {
          output.writeUInt64(2, this.size);
        }
        if (this.flags != 0) {
          output.writeUInt32(3, this.flags);
        }
        if (!java.util.Arrays.equals(this.shaFilename, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
          output.writeBytes(4, this.shaFilename);
        }
        if (!java.util.Arrays.equals(this.shaContent, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
          output.writeBytes(5, this.shaContent);
        }
        if (this.chunks != null && this.chunks.length > 0) {
          for (int i = 0; i < this.chunks.length; i++) {
            ChunkData element = this.chunks[i];
            if (element != null) {
              output.writeMessage(6, element);
            }
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (!this.filename.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, this.filename);
        }
        if (this.size != 0L) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt64Size(2, this.size);
        }
        if (this.flags != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(3, this.flags);
        }
        if (!java.util.Arrays.equals(this.shaFilename, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeBytesSize(4, this.shaFilename);
        }
        if (!java.util.Arrays.equals(this.shaContent, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeBytesSize(5, this.shaContent);
        }
        if (this.chunks != null && this.chunks.length > 0) {
          for (int i = 0; i < this.chunks.length; i++) {
            ChunkData element = this.chunks[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(6, element);
            }
          }
        }
        return size;
      }

      @Override
      public FileMapping mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              this.filename = input.readString();
              break;
            }
            case 16: {
              this.size = input.readUInt64();
              break;
            }
            case 24: {
              this.flags = input.readUInt32();
              break;
            }
            case 34: {
              this.shaFilename = input.readBytes();
              break;
            }
            case 42: {
              this.shaContent = input.readBytes();
              break;
            }
            case 50: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 50);
              int i = this.chunks == null ? 0 : this.chunks.length;
              ChunkData[] newArray =
                  new ChunkData[i + arrayLength];
              if (i != 0) {
                System.arraycopy(this.chunks, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new ChunkData();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new ChunkData();
              input.readMessage(newArray[i]);
              this.chunks = newArray;
              break;
            }
          }
        }
      }

      public static FileMapping parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new FileMapping(), data);
      }

      public static FileMapping parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new FileMapping().mergeFrom(input);
      }
    }

    private static volatile ContentManifestPayload[] _emptyArray;
    public static ContentManifestPayload[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ContentManifestPayload[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .ContentManifestPayload.FileMapping mappings = 1;
    public FileMapping[] mappings;

    public ContentManifestPayload() {
      clear();
    }

    public ContentManifestPayload clear() {
      mappings = FileMapping.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.mappings != null && this.mappings.length > 0) {
        for (int i = 0; i < this.mappings.length; i++) {
          FileMapping element = this.mappings[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.mappings != null && this.mappings.length > 0) {
        for (int i = 0; i < this.mappings.length; i++) {
          FileMapping element = this.mappings[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      return size;
    }

    @Override
    public ContentManifestPayload mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.mappings == null ? 0 : this.mappings.length;
            FileMapping[] newArray =
                new FileMapping[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.mappings, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new FileMapping();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new FileMapping();
            input.readMessage(newArray[i]);
            this.mappings = newArray;
            break;
          }
        }
      }
    }

    public static ContentManifestPayload parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ContentManifestPayload(), data);
    }

    public static ContentManifestPayload parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ContentManifestPayload().mergeFrom(input);
    }
  }

  public static final class ContentManifestMetadata extends
      com.google.protobuf.nano.ExtendableMessageNano<ContentManifestMetadata> {

    private static volatile ContentManifestMetadata[] _emptyArray;
    public static ContentManifestMetadata[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ContentManifestMetadata[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional uint32 depot_id = 1;
    public int depotId;

    // optional uint64 gid_manifest = 2;
    public long gidManifest;

    // optional uint32 creation_time = 3;
    public int creationTime;

    // optional bool filenames_encrypted = 4;
    public boolean filenamesEncrypted;

    // optional uint64 cb_disk_original = 5;
    public long cbDiskOriginal;

    // optional uint64 cb_disk_compressed = 6;
    public long cbDiskCompressed;

    // optional uint32 unique_chunks = 7;
    public int uniqueChunks;

    // optional uint32 crc_encrypted = 8;
    public int crcEncrypted;

    // optional uint32 crc_clear = 9;
    public int crcClear;

    public ContentManifestMetadata() {
      clear();
    }

    public ContentManifestMetadata clear() {
      depotId = 0;
      gidManifest = 0L;
      creationTime = 0;
      filenamesEncrypted = false;
      cbDiskOriginal = 0L;
      cbDiskCompressed = 0L;
      uniqueChunks = 0;
      crcEncrypted = 0;
      crcClear = 0;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.depotId != 0) {
        output.writeUInt32(1, this.depotId);
      }
      if (this.gidManifest != 0L) {
        output.writeUInt64(2, this.gidManifest);
      }
      if (this.creationTime != 0) {
        output.writeUInt32(3, this.creationTime);
      }
      if (this.filenamesEncrypted != false) {
        output.writeBool(4, this.filenamesEncrypted);
      }
      if (this.cbDiskOriginal != 0L) {
        output.writeUInt64(5, this.cbDiskOriginal);
      }
      if (this.cbDiskCompressed != 0L) {
        output.writeUInt64(6, this.cbDiskCompressed);
      }
      if (this.uniqueChunks != 0) {
        output.writeUInt32(7, this.uniqueChunks);
      }
      if (this.crcEncrypted != 0) {
        output.writeUInt32(8, this.crcEncrypted);
      }
      if (this.crcClear != 0) {
        output.writeUInt32(9, this.crcClear);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.depotId != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(1, this.depotId);
      }
      if (this.gidManifest != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(2, this.gidManifest);
      }
      if (this.creationTime != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(3, this.creationTime);
      }
      if (this.filenamesEncrypted != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.filenamesEncrypted);
      }
      if (this.cbDiskOriginal != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(5, this.cbDiskOriginal);
      }
      if (this.cbDiskCompressed != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(6, this.cbDiskCompressed);
      }
      if (this.uniqueChunks != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(7, this.uniqueChunks);
      }
      if (this.crcEncrypted != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(8, this.crcEncrypted);
      }
      if (this.crcClear != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(9, this.crcClear);
      }
      return size;
    }

    @Override
    public ContentManifestMetadata mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.depotId = input.readUInt32();
            break;
          }
          case 16: {
            this.gidManifest = input.readUInt64();
            break;
          }
          case 24: {
            this.creationTime = input.readUInt32();
            break;
          }
          case 32: {
            this.filenamesEncrypted = input.readBool();
            break;
          }
          case 40: {
            this.cbDiskOriginal = input.readUInt64();
            break;
          }
          case 48: {
            this.cbDiskCompressed = input.readUInt64();
            break;
          }
          case 56: {
            this.uniqueChunks = input.readUInt32();
            break;
          }
          case 64: {
            this.crcEncrypted = input.readUInt32();
            break;
          }
          case 72: {
            this.crcClear = input.readUInt32();
            break;
          }
        }
      }
    }

    public static ContentManifestMetadata parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ContentManifestMetadata(), data);
    }

    public static ContentManifestMetadata parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ContentManifestMetadata().mergeFrom(input);
    }
  }

  public static final class ContentManifestSignature extends
      com.google.protobuf.nano.ExtendableMessageNano<ContentManifestSignature> {

    private static volatile ContentManifestSignature[] _emptyArray;
    public static ContentManifestSignature[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ContentManifestSignature[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional bytes signature = 1;
    public byte[] signature;

    public ContentManifestSignature() {
      clear();
    }

    public ContentManifestSignature clear() {
      signature = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!java.util.Arrays.equals(this.signature, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
        output.writeBytes(1, this.signature);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!java.util.Arrays.equals(this.signature, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(1, this.signature);
      }
      return size;
    }

    @Override
    public ContentManifestSignature mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.signature = input.readBytes();
            break;
          }
        }
      }
    }

    public static ContentManifestSignature parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ContentManifestSignature(), data);
    }

    public static ContentManifestSignature parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ContentManifestSignature().mergeFrom(input);
    }
  }
}
