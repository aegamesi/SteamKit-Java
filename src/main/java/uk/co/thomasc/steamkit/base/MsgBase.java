// Generated by delombok at Wed Jun 15 22:04:52 CDT 2016
package uk.co.thomasc.steamkit.base;

import java.io.IOException;
import uk.co.thomasc.steamkit.base.generated.steamlanguage.EMsg;
import uk.co.thomasc.steamkit.base.generated.steamlanguageinternal.ISteamSerializableHeader;
import uk.co.thomasc.steamkit.types.JobID;
import uk.co.thomasc.steamkit.types.steamid.SteamID;

/**
 * This is the abstract base class for all available client messages. It's used
 * to maintain packet payloads and provide a header for all client messages.
 *
 * @param <T>
 * The header type for this client message.
 */
public abstract class MsgBase<T extends ISteamSerializableHeader> extends AMsgBase implements IClientMsg {
	/**
	 * true if this instance is protobuf backed; otherwise, false.
	 */
	private boolean isProto;
	/**
	 * The network message type.
	 */
	private EMsg msgType;
	/**
	 * The session id.
	 */
	protected int sessionID;
	/**
	 * The {@link SteamID}
	 */
	protected SteamID steamID;
	/**
	 * The target job id.
	 */
	protected JobID targetJobID;
	/**
	 * The source job id.
	 */
	protected JobID sourceJobID;
	/**
	 * Gets the header for this message type.
	 */
	protected T header;

	public MsgBase(Class<T> clazz) {
		this(clazz, 0);
	}

	/**
	 * Initializes a new instance of the {@link MsgBase} class.
	 *
	 * @param payloadReserve
	 * The number of bytes to initialize the payload capacity to.
	 */
	public MsgBase(Class<T> clazz, int payloadReserve) {
		super(payloadReserve);
		try {
			header = clazz.newInstance();
		} catch (final InstantiationException e) {
			uk.co.thomasc.steamkit.util.logging.DebugLog.writeLine("NEW_EX", "Exception: %s", e);
		} catch (final IllegalAccessException e) {
			uk.co.thomasc.steamkit.util.logging.DebugLog.writeLine("NEW_EX", "Exception: %s", e);
		}
	}

	/**
	 * serializes this client message instance to a byte array.
	 *
	 * @return Data representing a client message.
	 */
	@Override
	public abstract byte[] serialize() throws IOException;

	/**
	 * Initializes this client message by deserializing the specified data.
	 *
	 * @param data
	 * The data representing a client message.
	 * @throws IOException
	 */
	@Override
	public abstract void deSerialize(byte[] data) throws IOException;

	/**
	 * true if this instance is protobuf backed; otherwise, false.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isProto() {
		return this.isProto;
	}

	/**
	 * The network message type.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public EMsg getMsgType() {
		return this.msgType;
	}

	/**
	 * The session id.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getSessionID() {
		return this.sessionID;
	}

	/**
	 * The {@link SteamID}
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public SteamID getSteamID() {
		return this.steamID;
	}

	/**
	 * The target job id.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public JobID getTargetJobID() {
		return this.targetJobID;
	}

	/**
	 * The source job id.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public JobID getSourceJobID() {
		return this.sourceJobID;
	}

	/**
	 * Gets the header for this message type.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public T getHeader() {
		return this.header;
	}
}
